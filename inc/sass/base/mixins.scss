/*------------------------------------------*\
    MIXINS
\*------------------------------------------*/

// ADDS A BROWSER PREFIX TO THE PROPERTY
@mixin prefix($property, $value){
    -webkit-#{$property}: #{$value};
    -moz-#{$property}: #{$value};
    -ms-#{$property}: #{$value};
    #{$property}: #{$value};
}

@mixin appearance {
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
}

// Display Flex
@mixin flex{
    display: -webkit-box;
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
    -webkit-box-flex: 0;
    -ms-flex: none;
    flex: none;
}

@mixin inlineFlex{
    display: -webkit-inline-box;
    display: -webkit-inline-flex;
    display: -ms-inline-flexbox;
    display: inline-flex;
    -webkit-box-flex: 0;
    -ms-flex: none;
    flex: none;
}

@mixin flexValue($fg: 1, $fs: null, $fb: null) {
    -webkit-box-flex: $fg-boxflex;
    -webkit-flex: $fg $fs $fb;
    -moz-box-flex: $fg-boxflex;
    -moz-flex: $fg $fs $fb;
    -ms-flex: $fg $fs $fb;
    flex: $fg $fs $fb;
}

// Flex Direction
@mixin row {
    -webkit-box-orient: horizontal;
    -webkit-box-direction: normal;
    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    flex-direction: row;
}

@mixin flexColumn {
    -webkit-box-orient: vertical;
    -webkit-box-direction: normal;
    -webkit-flex-direction: column;
    -ms-flex-direction: column;
    flex-direction: column;
}

// Flex Wrap
@mixin wrap($wrap: wrap) {
    -ms-flex-wrap: wrap;
    flex-wrap: wrap;
}

// Vertical Position of Flex Items
@mixin vStart{
    -webkit-box-align: start;
    -webkit-align-items: flex-start;
    -ms-flex-align: start;
    -ms-grid-row-align: flex-start;align-items: flex-start;
}

@mixin vCenter{
    -webkit-box-align: center;
    -webkit-align-items: center;
    -ms-flex-align: center;
    -ms-grid-row-align: center;
    align-items: center;
}

@mixin vEnd{
    -webkit-box-align: end;
    -webkit-align-items: flex-end;
    -ms-flex-align: end;
    -ms-grid-row-align: flex-end;
    align-items: flex-end;
}

@mixin vStretch {
    -webkit-box-align: stretch;
    -webkit-align-items: stretch;
    -ms-flex-align: stretch;
    -ms-grid-row-align: stretch;
    align-items: stretch;
}

@mixin vBaseline{
    -webkit-box-align: baseline;
    -webkit-align-items: baseline;
    -ms-flex-align: baseline;
    -ms-grid-row-align: baseline;
    align-items: baseline;
}

// Horizontal Position of Flex Items
@mixin hStart {
    -webkit-box-pack: start;
    -webkit-justify-content: flex-start;
    -ms-flex-pack: start;
    justify-content: flex-start;
}

@mixin hCenter {
    -webkit-box-pack: center;
    -webkit-justify-content: center;
    -ms-flex-pack: center;
    justify-content: center;
}

@mixin hEnd {
    -webkit-box-pack: end;
    -webkit-justify-content: flex-end;
    -ms-flex-pack: end;
    justify-content: flex-end;
}

@mixin spaceB {
    -webkit-box-pack: justify;
    -webkit-justify-content: space-between;
    -ms-flex-pack: justify;
    justify-content: space-between;
}

@mixin spaceA {
    -webkit-justify-content: space-around;
    -ms-flex-pack: distribute;
    justify-content: space-around;
}

// Horizontally and Vertically Centered Element
@mixin center {
    @include vCenter();
    @include hCenter();
}

// Self Positioning of a Flex Item
@mixin selfStart {
    -webkit-align-self: flex-start;
    -ms-flex-item-align: start;
    align-self: flex-start;
}

@mixin selfCenter {
    -webkit-align-self: center;
    -ms-flex-item-align: center;
    align-self: center;
}

@mixin selfEnd {
    -webkit-align-self: flex-end;
    -ms-flex-item-align: end;
    align-self: flex-end;
}

@mixin selfBaseline {
    -webkit-align-self: baseline;
    -ms-flex-item-align: baseline;
    align-self: baseline;
}

@mixin selfStretch {
    -webkit-align-self: stretch;
    -ms-flex-item-align: stretch;
    align-self: stretch;
}

// Flex Order
@mixin order($int: 0) {
    -webkit-box-ordinal-group: $int + 1;
    -webkit-order: $int;
    -moz-order: $int;
    -ms-flex-order: $int;
    order: $int;
}

// Flex Grow
@mixin grow($int: 1) {
    -webkit-box-flex: $int;
    -ms-flex-positive: $int;
    flex-grow: $int;
}

// Transitions
@mixin ts($second){
    -webkit-transition: all $second;
    transition: all $second;
}

@mixin ts2($string...){
    -webkit-transition: $string;
    transition: $string;
}

@mixin delay($string...){
    -webkit-transition-delay: $string;
    transition-delay: $string;
}

@mixin tsDuration($string...) {
    -webkit-transition-duration: $string;
    transition-duration: $string;
}

@mixin tsProperty($string...) {
    -webkit-transition-property: $string;
    transition-property: $string;
}

@mixin origin($val1, $val2){
    -webkit-transform-origin: $val1 $val2;
    transform-origin: $val1 $val2;
}

// Vertical Centering With Transform
@mixin tvCenter {
    position: absolute;
    top: 50%;
    @include translate(0,-50%);
}

// Horizontal Centering With Transform
@mixin thCenter {
    position: absolute;
    left: 50%;
    @include translate(-50%,0);
}

// Horizontally and Vertically Centered Element
@mixin tCenter {
    position: absolute;
    top: 50%;
    left: 50%;
    @include translate(-50%, -50%);
}

// Transform Rotate
@mixin rotate($degree){
    -webkit-transform: rotate($degree);
    transform: rotate($degree);
}

// Transform Scale
@mixin scale($int){
    -webkit-transform: scale($int);
    transform: scale($int);
}

@mixin scale2($value1, $value2){
    -webkit-transform: scale($value1, $value2);
    transform: scale($value1, $value2);
}

// Transform Translate
@mixin translate($value1, $value2){
    -webkit-transform: translate($value1,$value2);
        transform: translate($value1,$value2);
}

// Transform SkewX
@mixin skewX($degree){
    -webkit-transform: skewX($degree);
    transform: skewX($degree);
}

// Transform SkewY
@mixin skewY($degree){
    -webkit-transform: skewY($degree);
    transform: skewY($degree);
}

// Transform With More Than 1 Property
@mixin transform ($string...){
    -webkit-transform: $string;
    transform: $string;
}

// Covered Background
@mixin cover($cover: cover){
    background: no-repeat center / $cover;
}

// Overlay
@mixin overlay($color:black, $opacity:0.5) {
    width: 100%;
    height: 100%;
    background: rgba($color, $opacity);
    position: absolute;
    top: 0;
    left: 0;
}

// Triangle
@mixin triangle($width,$direction,$color){
    border: #{$width}px solid transparent;
    border-#{$direction}-color: $color;
    content: "";
    position: absolute;
}

// Column
@mixin column($numberOfColumns, $columnMargin){
    -webkit-column-count: $numberOfColumns;
    -moz-column-count: $numberOfColumns;
    column-count: $numberOfColumns;
    -webkit-column-gap: $columnMargin;
    -moz-column-gap: $columnMargin;
    column-gap: $columnMargin;
}

// Animation
@mixin keyframes($animation-name) {
    @-webkit-keyframes #{$animation-name} {
        @content;
    }

    @keyframes #{$animation-name} {
        @content;
    }
}

@mixin animation($str) {
    -webkit-animation: $str;
     animation: $str;
}

// Hide & Show
@mixin hide{
    visibility: hidden;
    opacity: 0;
}

@mixin show{
    visibility: visible;
    opacity: 1;
}

// Linear Gradient
@mixin linear($from, $to, $startColor, $endColor){
    background-image: linear-gradient(to $to, $startColor 0%, $endColor 100%);
}

@mixin stripes($direction, $stripeColors) {
    $length: length($stripeColors);

    @if $length > 1 {
        $stripes: ();

        @for $i from 1 through $length {
            $stripe: (100% / $length) * ($i - 1);

            @if $i > 1 {
                $stripes: append($stripes, nth($stripeColors, $i - 1) $stripe, comma);
            }

            $stripes: append($stripes, nth($stripeColors, $i) $stripe, comma);
        }

        background-image: linear-gradient($direction, $stripes);
    }
}

// Font Face
@mixin fontFace($familyName, $fontName){
    @font-face {
        font-family: '#{$familyName}';
        src: url('../font/#{$fontName}.eot');
        src: url('../font/#{$fontName}.eot?#iefix') format('embedded-opentype'),
             url('../font/#{$fontName}.woff2') format('woff2'),
             url('../font/#{$fontName}.woff') format('woff'),
             url('../font/#{$fontName}.ttf') format('truetype'),
             url('../font/#{$fontName}.svg##{$familyName}') format('svg');
        font-weight: normal;
        font-style: normal;
    }

    @media screen and (-webkit-min-device-pixel-ratio:0) {
        @font-face {
            font-family: '#{$familyName}';
            src: url('../font/#{$fontName}.svg') format('svg');
        }
    }
}
