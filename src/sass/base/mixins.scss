/*------------------------------------------*\
    MIXINS
\*------------------------------------------*/
@import "functions";

// Browser Prefixes
@mixin prefix($property, $value){
    -webkit-#{$property}: #{$value};
    -moz-#{$property}: #{$value};
    -ms-#{$property}: #{$value};
    #{$property}: #{$value};
}

// Appearance
@mixin appearance {
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
}

// Display Flex
@mixin flex($display){
    @if $display == flex {
        display: -webkit-box;
        display: -moz-box;
        display: -ms-flexbox;
        display: -webkit-flex;
        display: flex;
    } @else if $display == inline-flex {
        display: -webkit-inline-box;
        display: -webkit-inline-flex;
        display: -ms-inline-flexbox;
        display: inline-flex;
    }
}

// Flex Direction
@mixin flex-direction($direction){
    @if $direction == row {
        -webkit-box-orient: horizontal;
        -webkit-box-direction: normal;
        -webkit-flex-direction: row;
        -ms-flex-direction: row;
        flex-direction: row;
    } @else if $direction == column {
        -webkit-box-orient: vertical;
        -webkit-box-direction: normal;
        -webkit-flex-direction: column;
        -ms-flex-direction: column;
        flex-direction: column;
    } @else if $direction == row-reverse {
        -webkit-box-orient: horizontal;
        -webkit-box-direction: reverse;
        -ms-flex-direction: row-reverse;
        flex-direction: row-reverse;
    } @else if $direction == column-reverse {
        -webkit-box-orient: vertical;
        -webkit-box-direction: reverse;
        -ms-flex-direction: column-reverse;
        flex-direction: column-reverse;
    }
}

// Flex Align Content
@mixin align-content($position){
    @if $position == flex-start {
        -ms-flex-line-pack: start;
        align-content: flex-start;
    } @else if $position == flex-end {
        -ms-flex-line-pack: end;
        align-content: flex-end;
    } @else if $position == center {
        -ms-flex-line-pack: center;
        align-content: center;
    } @else if $position == space-between {
        -ms-flex-line-pack: justify;
        align-content: space-between;
    } @else if $position == space-around {
        -ms-flex-line-pack: distribute;
        align-content: space-around;
    } @else if $position == stretch {
        -ms-flex-line-pack: stretch;
        align-content: stretch;
    }
}

// Flex Align Items
@mixin align-items($position) {
    @if $position == flex-start {
        -webkit-box-align: start;
        -ms-flex-align: start;
        align-items: flex-start;
    } @else if $position == flex-end {
        -webkit-box-align: end;
        -ms-flex-align: end;
        align-items: flex-end;
    } @else if $position == center {
        -webkit-box-align: center;
        -ms-flex-align: center;
        align-items: center;
    } @else if $position == baseline {
        -webkit-box-align: baseline;
        -ms-flex-align: baseline;
        align-items: baseline;
    } @else if $position == stretch {
        -webkit-box-align: stretch;
        -ms-flex-align: stretch;
        align-items: stretch;
    }
}

// Flex Justify Content
@mixin justify-content($position){
    @if $position == flex-start {
        -webkit-box-pack: start;
        -webkit-justify-content: flex-start;
        -ms-flex-pack: start;
        justify-content: flex-start;
    } @else if $position == flex-end {
        -webkit-box-pack: end;
        -webkit-justify-content: flex-end;
        -ms-flex-pack: end;
        justify-content: flex-end;
    } @else if $position == center {
        -webkit-box-pack: center;
        -webkit-justify-content: center;
        -ms-flex-pack: center;
        justify-content: center;
    } @else if $position == space-between {
        -webkit-box-pack: justify;
        -webkit-justify-content: space-between;
        -ms-flex-pack: justify;
        justify-content: space-between;
    } @else if $position == space-around {
        -webkit-justify-content: space-around;
        -ms-flex-pack: distribute;
        justify-content: space-around;
    }
}

// Flex Align Self
@mixin align-self($position){
    @if $position == flex-start {
        -webkit-align-self: flex-start;
        -ms-flex-item-align: start;
        align-self: flex-start;
    } @else if $position == flex-end {
        -webkit-align-self: flex-end;
        -ms-flex-item-align: end;
        align-self: flex-end;
    } @else if $position == center {
        -webkit-align-self: center;
        -ms-flex-item-align: center;
        align-self: center;
    } @else if $position == baseline {
        -webkit-align-self: baseline;
        -ms-flex-item-align: baseline;
        align-self: baseline;
    } @else if $position == stretch {
        -webkit-align-self: stretch;
        -ms-flex-item-align: stretch;
        align-self: stretch;
    }
}

// Flex Wrap
@mixin flex-wrap($wrap) {
    @if $wrap == wrap {
        -ms-flex-wrap: wrap;
        flex-wrap: wrap;
    } @else if $wrap == nowrap {
        -ms-flex-wrap: nowrap;
        flex-wrap: nowrap;
    } @else if $wrap == wrap-reverse {
        -ms-flex-wrap: wrap-reverse;
        flex-wrap: wrap-reverse;
    }
}

// Flex Value
@mixin flex-value($flex-grow: 1, $flex-shrink: null, $flex-basis: null) {
    -webkit-box-flex: $flex-grow;
    -ms-flex: $flex-grow $flex-shrink $flex-basis;
    flex: $flex-grow $flex-shrink $flex-basis;
}

// Flex Order
@mixin flex-order($int: 0) {
    -webkit-box-ordinal-group: $int + 1;
    -webkit-order: $int;
    -moz-order: $int;
    -ms-flex-order: $int;
    order: $int;
}

// Flex Grow
@mixin flex-grow($int: 1) {
    -webkit-box-flex: $int;
    -ms-flex-positive: $int;
    flex-grow: $int;
}

// Flex Shrink
@mixin flex-shrink($int){
    -ms-flex-negative: $int;
    flex-shrink: $int;
}

// Flex Basis
@mixin flex-basis($value){
    -ms-flex-preferred-size: $value;
    flex-basis: $value;
}

// Transition
@mixin transition($transition...) {
    -webkit-transition: $transition;
    transition: $transition;
}

// Transition Delay
@mixin transition-delay($string...){
    -webkit-transition-delay: $string;
    transition-delay: $string;
}

// Transition Duration
@mixin transition-duration($string...) {
    -webkit-transition-duration: $string;
    transition-duration: $string;
}

// Transition Property
@mixin transition-property($string...) {
    -webkit-transition-property: $string;
    transition-property: $string;
}

// Transition Timing Function
@mixin transition-timing-function($timing) {
    -webkit-transition-timing-function: easing($timing);
    transition-timing-function:         easing($timing);
}

// Vertical Centering With Transform
@mixin centerer($type){
    position: absolute;

    @if ($type == vertical){
        top: 50%;
        @include translate(0,-50%);
    } @if ($type == horizontal) {
        left: 50%;
        @include translate(-50%,0);
    } @if ($type == center) {
        top: 50%;
        left: 50%;
        @include translate(-50%, -50%);
    }
}

// Transform Rotate
@mixin rotate($degree){
    -webkit-transform: rotate($degree);
    transform: rotate($degree);
}

// Transform Scale
@mixin scale($string...){
    -webkit-transform: scale($string);
    transform: scale($string);
}

@mixin scaleX($int){
    -webkit-transform: scaleX($int);
    transform: scaleX($int);
}

@mixin scaleY($int){
    -webkit-transform: scaleY($int);
    transform: scaleY($int);
}

// Transform Translate
@mixin translate($value1, $value2){
    -webkit-transform: translate($value1,$value2);
        transform: translate($value1,$value2);
}

// Transform SkewX
@mixin skewX($degree){
    -webkit-transform: skewX($degree);
    transform: skewX($degree);
}

// Transform SkewY
@mixin skewY($degree){
    -webkit-transform: skewY($degree);
    transform: skewY($degree);
}

// Transform With More Than 1 Property
@mixin transform ($string...){
    -webkit-transform: $string;
    transform: $string;
}

// Transform Origin
@mixin origin($string...){
    -webkit-transform-origin: $string;
    transform-origin: $string;
}

// Covered Background
@mixin cover($cover: cover){
    background: no-repeat center / $cover;
}

// Overlay
@mixin overlay($color:black, $opacity:0.5, $pseudo: true) {
    width: 100%;
    height: 100%;
    background: rgba($color, $opacity);
    position: absolute;
    top: 0;
    left: 0;

    @if $pseudo {
        content: "";
    }
}

// Triangle - Direction is
@mixin triangle($direction,$width,$height,$color,$pseudo:true){
    border-style: solid;
    position: absolute;

    @if $pseudo {
        content: "";
    }

    @if ($direction == top){
        border-width: 0 #{$width / 2} $height #{$width / 2};
        border-color: transparent transparent $color transparent;
    }
    @else if ($direction == bottom){
        border-width: $height #{$width / 2} 0 #{$width / 2};
        border-color: $color transparent transparent transparent;
    }
    @else if ($direction == right){
        border-width: #{$height / 2} 0 #{$height / 2} $width;
        border-color: transparent transparent transparent $color;
    }
    @else if ($direction == left){
        border-width: #{$height / 2} $width #{$height / 2} 0;
        border-color: transparent $color transparent transparent;
    }
    @else if ($direction == right-top or $direction == top-right){
        border-width: 0 $width $height 0;
        border-color: transparent $color transparent transparent;
    }
    @else if ($direction == left-top or $direction == top-left){
        border-width: $height $width 0 0;
        border-color: $color transparent transparent transparent;
    }
    @else if ($direction == left-bottom or $direction == bottom-left){
        border-width: $height 0 0 $width;
        border-color: transparent transparent transparent $color;
    }
    @else if ($direction == right-bottom or $direction == bottom-right){
        border-width: 0 0 $height $width;
        border-color: transparent transparent $color transparent;
    }
}

// Column
@mixin column($numberOfColumns, $columnMargin){
    -webkit-column-count: $numberOfColumns;
    -moz-column-count: $numberOfColumns;
    column-count: $numberOfColumns;
    -webkit-column-gap: $columnMargin;
    -moz-column-gap: $columnMargin;
    column-gap: $columnMargin;
}

// Animation
@mixin keyframes($animation-name) {
    @-webkit-keyframes #{$animation-name} {
        @content;
    }

    @keyframes #{$animation-name} {
        @content;
    }
}

@mixin animation($string...) {
    -webkit-animation: $string;
     animation: $string;
}

// Hide & Show
@mixin hide{
    visibility: hidden;
    opacity: 0;
}

@mixin show{
    visibility: visible;
    opacity: 1;
}

// Linear Gradient
@mixin linear-gradient($string...) {
    background: linear-gradient($string);
}

// Radial Gradient
@mixin radial-gradient($from,$to){
    background: -webkit-radial-gradient(center, circle cover, $from, $to);
    background: -ms-radial-gradient(center, circle cover, $from, $to);
    background: radial-gradient(center, circle cover, $from, $to);
}

// Repeating Gradient
@mixin repeating-gradient($deg,$color1,$width1,$color2,$width2){
    background-image: repeating-linear-gradient($deg, $color1, $color1 $width1, $color2 1px, $color2 ($width1 + $width2));
}

// Filters
@mixin filter($type,$value){
    -webkit-filter: $type + "(#{$value})";
    filter: $type + "(#{$value})";
}

@mixin stripes($direction, $stripeColors) {
    $length: length($stripeColors);

    @if $length > 1 {
        $stripes: ();

        @for $i from 1 through $length {
            $stripe: (100% / $length) * ($i - 1);

            @if $i > 1 {
                $stripes: append($stripes, nth($stripeColors, $i - 1) $stripe, comma);
            }

            $stripes: append($stripes, nth($stripeColors, $i) $stripe, comma);
        }

        background-image: linear-gradient($direction, $stripes);
    }
}

// Placeholder
@mixin placeholder($color) {
    input::-webkit-input-placeholder, textarea::-webkit-input-placeholder {
        color: $color;
    }
    input:-moz-placeholder, textarea:-moz-placeholder {
        color: $color;
    }
    input::-moz-placeholder, textarea::-moz-placeholder {
        color: $color;
    }
    input:-ms-input-placeholder, textarea:-ms-input-placeholder {
        color: $color;
    }
}

// Font Face
@mixin fontFace($font){
    @font-face {
        font-family: '#{$font}';
        src: url('../font/#{$font}.woff2') format('woff2'),
             url('../font/#{$font}.woff') format('woff'),
             url('../font/#{$font}.ttf') format('truetype')
    }
}

// Font
@mixin font($size:null,$height:null,$family:null,$color:null,$align:null) {
    @if (($size != null)){
        font-size: px-to-rem($size);
    }

    @if (($height != null)){
        line-height: px-to-rem($height);
    }

    @if (($family != null)){
        font-family: "#{$family}";
    }

    @if (($color != null)){
        color: $color;
    }

    @if (($align != null)){
        text-align: $align;
    }
}

// Media Queries
@mixin media($min, $max, $type:screen){
    @media #{$type} and (min-width: $min + px) and (max-width: $max - 1 + px){
        @content
    }
}

@mixin media-min($min, $type:screen){
    @media #{$type} and (min-width: $min + px){
        @content
    }
}

@mixin media-max($max, $type:screen){
    @media #{$type} and (max-width: $max + px){
        @content
    }
}

