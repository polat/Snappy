/*------------------------------------------*\
    MIXINS
\*------------------------------------------*/
@import "functions";

// Vertical Centering With Transform
@mixin centerer($type){
    position: absolute;

    @if ($type == vertical){
        top: 50%;
        transform: translate(0, -50%);
    } @if ($type == horizontal) {
        left: 50%;
        transform: translate(-50%, 0);
    } @if ($type == center) {
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }
}

// Overlay
@mixin overlay($color:black, $opacity:0.5, $pseudo: true) {
    width: 100%;
    height: 100%;
    background: rgba($color, $opacity);
    position: absolute;
    top: 0;
    left: 0;

    @if $pseudo {
        content: "";
    }
}

// Triangle - Direction is
@mixin triangle($direction, $width, $height, $color, $pseudo:true){
    border-style: solid;
    position: absolute;

    @if $pseudo {
        content: "";
    }

    @if ($direction == top){
        border-width: 0 #{$width / 2} $height #{$width / 2};
        border-color: transparent transparent $color transparent;
    }
    @else if ($direction == bottom){
        border-width: $height #{$width / 2} 0 #{$width / 2};
        border-color: $color transparent transparent transparent;
    }
    @else if ($direction == right){
        border-width: #{$height / 2} 0 #{$height / 2} $width;
        border-color: transparent transparent transparent $color;
    }
    @else if ($direction == left){
        border-width: #{$height / 2} $width #{$height / 2} 0;
        border-color: transparent $color transparent transparent;
    }
    @else if ($direction == right-top or $direction == top-right){
        border-width: 0 $width $height 0;
        border-color: transparent $color transparent transparent;
    }
    @else if ($direction == left-top or $direction == top-left){
        border-width: $height $width 0 0;
        border-color: $color transparent transparent transparent;
    }
    @else if ($direction == left-bottom or $direction == bottom-left){
        border-width: $height 0 0 $width;
        border-color: transparent transparent transparent $color;
    }
    @else if ($direction == right-bottom or $direction == bottom-right){
        border-width: 0 0 $height $width;
        border-color: transparent transparent $color transparent;
    }
}

// Column
@mixin column($numberOfColumns, $columnMargin){
    column-count: $numberOfColumns;
    column-gap: $columnMargin;
}

// Hide & Show
@mixin hide{
    visibility: hidden;
    opacity: 0;
}

@mixin show{
    visibility: visible;
    opacity: 1;
}

// Stripes
@mixin stripes($direction, $stripeColors) {
    $length: length($stripeColors);

    @if $length > 1 {
        $stripes: ();

        @for $i from 1 through $length {
            $stripe: (100% / $length) * ($i - 1);

            @if $i > 1 {
                $stripes: append($stripes, nth($stripeColors, $i - 1) $stripe, comma);
            }

            $stripes: append($stripes, nth($stripeColors, $i) $stripe, comma);
        }

        background-image: linear-gradient($direction, $stripes);
    }
}

// Font
@mixin font($size:null, $height:null, $family:null, $color:null, $align:null) {
    @if (($size != null)){
        font-size: px-to-rem($size);
    }

    @if (($height != null)){
        line-height: px-to-rem($height);
    }

    @if (($family != null)){
        font-family: "#{$family}";
    }

    @if (($color != null)){
        color: $color;
    }

    @if (($align != null)){
        text-align: $align;
    }
}

// Font Face
@mixin fontFace($font){
    @font-face {
        font-family: '#{$font}';
        src: url('../font/#{$font}.woff2') format('woff2'),
             url('../font/#{$font}.woff') format('woff'),
             url('../font/#{$font}.ttf') format('truetype')
    }
}

// Media Queries
@mixin media($min, $max, $type:screen){
    @media #{$type} and (min-width: $min + px) and (max-width: $max - 1 + px){
        @content
    }
}

@mixin media-min($min, $type:screen){
    @media #{$type} and (min-width: $min + px){
        @content
    }
}

@mixin media-max($max, $type:screen){
    @media #{$type} and (max-width: $max + px){
        @content
    }
}